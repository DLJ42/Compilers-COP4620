#!/bin/sh
# This is a shell archive (produced by GNU sharutils 4.7).
# To extract the files from this archive, save it to some FILE, remove
# everything before the `#!/bin/sh' line above, then type `sh FILE'.
#
lock_dir=_sh11243
# Made on 2020-02-27 21:36 EST by <n01177471@osprey.unfcsd.unf.edu>.
# Source directory was `/home/71/n01177471/compilers/prj3'.
#
# Existing files will *not* be overwritten, unless `-c' is specified.
#
# This shar contains:
# length mode       name
# ------ ---------- ------------------------------------------
#     21 -rw-r--r-- accept_test1
#     23 -rw-r--r-- reject_test1
#   1116 -rw-r--r-- myp3.l
#  12189 -rw-r--r-- myp3.y
#    231 -rwxr--r-- makefile
#
MD5SUM=${MD5SUM-md5sum}
f=`${MD5SUM} --version | egrep '^md5sum .*(core|text)utils'`
test -n "${f}" && md5check=true || md5check=false
${md5check} || \
  echo 'Note: not verifying md5sums.  Consider installing GNU coreutils.'
save_IFS="${IFS}"
IFS="${IFS}:"
gettext_dir=FAILED
locale_dir=FAILED
first_param="$1"
for dir in $PATH
do
  if test "$gettext_dir" = FAILED && test -f $dir/gettext \
     && ($dir/gettext --version >/dev/null 2>&1)
  then
    case `$dir/gettext --version 2>&1 | sed 1q` in
      *GNU*) gettext_dir=$dir ;;
    esac
  fi
  if test "$locale_dir" = FAILED && test -f $dir/shar \
     && ($dir/shar --print-text-domain-dir >/dev/null 2>&1)
  then
    locale_dir=`$dir/shar --print-text-domain-dir`
  fi
done
IFS="$save_IFS"
if test "$locale_dir" = FAILED || test "$gettext_dir" = FAILED
then
  echo=echo
else
  TEXTDOMAINDIR=$locale_dir
  export TEXTDOMAINDIR
  TEXTDOMAIN=sharutils
  export TEXTDOMAIN
  echo="$gettext_dir/gettext -s"
fi
if (echo "testing\c"; echo 1,2,3) | grep c >/dev/null
then if (echo -n test; echo 1,2,3) | grep n >/dev/null
     then shar_n= shar_c='
'
     else shar_n=-n shar_c= ; fi
else shar_n= shar_c='\c' ; fi
f=shar-touch.$$
st1=200112312359.59
st2=123123592001.59
st2tr=123123592001.5 # old SysV 14-char limit
st3=1231235901

if touch -am -t ${st1} ${f} >/dev/null 2>&1 && \
   test ! -f ${st1} && test -f ${f}; then
  shar_touch='touch -am -t $1$2$3$4$5$6.$7 "$8"'

elif touch -am ${st2} ${f} >/dev/null 2>&1 && \
   test ! -f ${st2} && test ! -f ${st2tr} && test -f ${f}; then
  shar_touch='touch -am $3$4$5$6$1$2.$7 "$8"'

elif touch -am ${st3} ${f} >/dev/null 2>&1 && \
   test ! -f ${st3} && test -f ${f}; then
  shar_touch='touch -am $3$4$5$6$2 "$8"'

else
  shar_touch=:
  echo
  ${echo} 'WARNING: not restoring timestamps.  Consider getting and'
  ${echo} 'installing GNU `touch'\'', distributed in GNU coreutils...'
  echo
fi
rm -f ${st1} ${st2} ${st2tr} ${st3} ${f}
#
if test ! -d ${lock_dir}
then : ; else ${echo} 'lock directory '${lock_dir}' exists'
  exit 1
fi
if mkdir ${lock_dir}
then ${echo} 'x - created lock directory `'${lock_dir}\''.'
else ${echo} 'x - failed to create lock directory `'${lock_dir}\''.'
  exit 1
fi
# ============= accept_test1 ==============
if test -f 'accept_test1' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING accept_test1 (file already exists)'
else
${echo} 'x - extracting accept_test1 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'accept_test1' &&
S RENAME CNO AS CITY
SHAR_EOF
  (set 20 20 02 27 21 02 21 'accept_test1'; eval "$shar_touch") &&
  chmod 0644 'accept_test1'
if test $? -ne 0
then ${echo} 'restore of accept_test1 failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'accept_test1: MD5 check failed'
       ) << \SHAR_EOF
0aef731470c214d223fc40b547151ed0  accept_test1
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'accept_test1'` -ne 21 && \
  ${echo} 'restoration warning:  size of accept_test1 is not 21'
  fi
fi
# ============= reject_test1 ==============
if test -f 'reject_test1' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING reject_test1 (file already exists)'
else
${echo} 'x - extracting reject_test1 (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'reject_test1' &&
S RENAME CITY AS CNO S
SHAR_EOF
  (set 20 20 02 27 21 31 24 'reject_test1'; eval "$shar_touch") &&
  chmod 0644 'reject_test1'
if test $? -ne 0
then ${echo} 'restore of reject_test1 failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'reject_test1: MD5 check failed'
       ) << \SHAR_EOF
ba5a90c017101fb1694dccf90cfe0666  reject_test1
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'reject_test1'` -ne 23 && \
  ${echo} 'restoration warning:  size of reject_test1 is not 23'
  fi
fi
# ============= myp3.l ==============
if test -f 'myp3.l' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING myp3.l (file already exists)'
else
${echo} 'x - extracting myp3.l (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'myp3.l' &&
%{
#include "myp3.tab.h"
extern int yyval;
%}
num     [0-9]
%%
"<" {return(LT);}
">" {return(GT);}
"<>" {return(LTGT);}
"<=" {return(LTE);}
">=" {return(GTE);}
"=" {return(EQ);}
{num} {return(NUM);}
"\{" {return(LBRC);}
"\}" {return(RBRC);}
"\[" {return(LBRK);}
"\]" {return(RBRK);}
"\(" {return(LP);}
"\)" {return(RP);}
"," {return(CMMA);}
"RENAME" {return(RENAME);}
"AS"    {return(AS);}
"WHERE"  {return(WHERE);}
"CNO" {return(CNO);}
"CITY" {return(CITY);}
"CNAME" {return(CNAME);}
"SNO" {return(SNO);}
"PNO" {return(PNO);}
"TQTY" {return(TQTY);}
"SNAME" {return(SNAME);}
"QUOTA" {return(QUOTA);}
"PNAME" {return(PNAME);}
"COST" {return(COST);}
"AVQTY" {return(AVQTY);}
"S\#" {return(SS);}
"STATUS" {return(STATUS);}
"P\#" {return(PP);}
"COLOR" {return(COLOR);}
"WEIGHT" {return(WEIGHT);}
"QTY" {return(QTY);}
"S" {return(S);}
"P" {return(P);}
"SP" {return(SP);}
"PRDCT" {return(PRDCT);}
"CUST" {return(CUST);}
"ORDERS" {return(ORDERS);}
"UNION" {return(UNION);}
"INTERSECT" {return(INTERSECT);}
"MINUS" {return(MINUS);}
"TIMES" {return(TIMES);}
"JOIN" {return(JOIN);}
"DIVIDEBY" {return(DIVIDEBY);}
X.	return;
%%
SHAR_EOF
  (set 20 20 02 27 21 32 02 'myp3.l'; eval "$shar_touch") &&
  chmod 0644 'myp3.l'
if test $? -ne 0
then ${echo} 'restore of myp3.l failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'myp3.l: MD5 check failed'
       ) << \SHAR_EOF
0b21c362aa34fb0b865ec7d67baff450  myp3.l
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'myp3.l'` -ne 1116 && \
  ${echo} 'restoration warning:  size of myp3.l is not 1116'
  fi
fi
# ============= myp3.y ==============
if test -f 'myp3.y' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING myp3.y (file already exists)'
else
${echo} 'x - extracting myp3.y (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'myp3.y' &&
%{
X    #include <stdio.h>
X    #include <stdlib.h>
X    extern yylex();
X    extern yytext[];
X    extern FILE *yyin;
%}
X
%start      start
%token LT      
%token GT 
%token LTGT 
%token LTE 
%token GTE 
%token EQ 
%token NUM 
%token LBRC 
%token RBRC 
%token LBRK 
%token RBRK 
%token LP 
%token RP 
%token CMMA 
%token RENAME 
%token AS 
%token WHERE 
%token CNO 
%token CITY 
%token CNAME 
%token SNO 
%token PNO 
%token TQTY 
%token SNAME 
%token QUOTA 
%token PNAME 
%token COST 
%token AVQTY 
%token SS 
%token STATUS 
%token PP 
%token COLOR 
%token WEIGHT 
%token QTY 
%token S 
%token P 
%token SP 
%token PRDCT 
%token CUST 
%token ORDERS
%token UNION 
%token INTERSECT
%token MINUS
%token TIMES 
%token JOIN
%token DIVIDEBY     
%%
X
start                               :                       expression                              { printf("ACCEPT\n");
X                                                                                                    };
expression                          :                       oneRelationExpression                 { 
X                                                                                                    };
X                                    |                       twoRelationExpression                 { 
X                                                                                                    };
oneRelationExpression             :                       renaming                                { 
X                                                                                                    };
X                                    |                       restriction                             {
X                                                                                                    };
X                                    |                       projection                              {
X                                                                                                    };
renaming                            :                       term RENAME attribute AS attribute          {
X                                                                                                    };
term                                :                       relation                                {
X                                                                                                    };
X                                    |                       LP expression RP                        {
X                                                                                                    };
restriction                         :                       term WHERE comparison                      {
X                                                                                                    };
projection                          :                       term                                    {
X                                                                                                    };
X                                    |                       LBRK attributeCommalist RBRK               {
X                                                                                                    };
attributeCommalist                 :                       attribute                               {
X                                                                                                    };
X                                    |                       attribute CMMA attributeCommalist        {
X                                                                                                    };
twoRelationExpression             :                       projection binaryOperation expression  {
X                                                                                                    };
binaryOperation                    :                       UNION                                      {
X                                                                                                    };
X                                    |                       INTERSECT                                      {
X                                                                                                    };
X                                    |                       MINUS                                      {
X                                                                                                    };
X                                    |                       TIMES                                      {
X                                                                                                    };
X                                    |                       JOIN                                      {
X                                                                                                    };
X                                    |                       DIVIDEBY                                      {
X                                                                                                    };
comparison                          :                       attribute compare number                {    
X                                                                                                    };
compare                             :                       LT                                     {
X                                                                                                    };
X                                    |                       GT                                     {
X                                                                                                    };
X                                    |                       LTE                                     {
X                                                                                                    };
X                                    |                       GTE                                     {
X                                                                                                    };
X                                    |                       EQ                                     {
X                                                                                                    };
X                                    |                       LTGT                                     {
X                                                                                                    };
number                              :                       val                                     {
X                                                                                                    };
X                                    |                       val number                              {
X                                                                                                    };
val                                 :                       NUM                                     {
X                                                                                                    };
attribute                           :                       CNO                                      {
X                                                                                                    };
X                                    |                       CITY                                      {
X                                                                                                    };
X                                    |                       CNAME                                      {
X                                                                                                    };
X                                    |                       SNO                                      {
X                                                                                                    };
X                                    |                       PNO                                      {
X                                                                                                    };
X                                    |                       TQTY                                      {
X                                                                                                    };
X                                    |                       SNAME                                      {
X                                                                                                    };
X                                    |                       QUOTA                                      {
X                                                                                                    };
X                                    |                       PNAME                                      {
X                                                                                                    };
X                                    |                       COST                                      {
X                                                                                                    };
X                                    |                       AVQTY                                      {
X                                                                                                    };
X                                    |                       SS                                      {
X                                                                                                    };
X                                    |                       STATUS                                      {
X                                                                                                    };
X                                    |                       PP                                      {
X                                                                                                    };
X                                    |                       COLOR                                      {
X                                                                                                    };
X                                    |                       WEIGHT                                      {
X                                                                                                    };
X                                    |                       QTY                                      {
X                                                                                                    };
relation                            :                       S                                      { 
X                                                                                                    };
X                                    |                       P                                      {
X                                                                                                    };
X                                    |                       SP                                      {
X                                                                                                    };
X                                    |                       PRDCT                                      {
X                                                                                                    };
X                                    |                       CUST                                      {
X                                                                                                    };
X                                    |                       ORDERS                                      {
X                                                                                                    };
%%
int main(int argc, char *argv[])
{
X   yyin = fopen(argv[1], "r");
X   if (!yyin)
X   {
X      printf("no file\n");
X      exit(0);
X   }
X   yyparse();
X   //printf("\nACCEPT\n");
}
yyerror()
{
X   return;
X   printf("error from yyerror\n");
X   exit(0);
}
yywrap()
{
X   return;
X   exit(0);
}
SHAR_EOF
  (set 20 20 02 27 21 35 37 'myp3.y'; eval "$shar_touch") &&
  chmod 0644 'myp3.y'
if test $? -ne 0
then ${echo} 'restore of myp3.y failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'myp3.y: MD5 check failed'
       ) << \SHAR_EOF
f666af81a8fba639debe3fad29d4e7c0  myp3.y
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'myp3.y'` -ne 12189 && \
  ${echo} 'restoration warning:  size of myp3.y is not 12189'
  fi
fi
# ============= makefile ==============
if test -f 'makefile' && test "$first_param" != -c; then
  ${echo} 'x -SKIPPING makefile (file already exists)'
else
${echo} 'x - extracting makefile (text)'
  sed 's/^X//' << 'SHAR_EOF' > 'makefile' &&
myp3:	myp3.tab.o lex.yy.o
X		cc -o myp3 lex.yy.o myp3.tab.o
X
myp3.tab.o:	myp3.tab.c
X		cc -c myp3.tab.c
X
myp3.tab.c:	myp3.y
X		bison -d myp3.y
X
lex.yy.o: lex.yy.c myp3.tab.h
X		cc -c lex.yy.c
X
lex.yy.c:	myp3.l myp3.tab.c
X		flex myp3.l
SHAR_EOF
  (set 20 20 02 27 16 11 55 'makefile'; eval "$shar_touch") &&
  chmod 0744 'makefile'
if test $? -ne 0
then ${echo} 'restore of makefile failed'
fi
  if ${md5check}
  then (
       ${MD5SUM} -c >/dev/null 2>&1 || ${echo} 'makefile: MD5 check failed'
       ) << \SHAR_EOF
7dd27bf296c408fbb98d400f6d2ec0f1  makefile
SHAR_EOF
  else
test `LC_ALL=C wc -c < 'makefile'` -ne 231 && \
  ${echo} 'restoration warning:  size of makefile is not 231'
  fi
fi
if rm -fr ${lock_dir}
then ${echo} 'x - removed lock directory `'${lock_dir}\''.'
else ${echo} 'x - failed to remove lock directory `'${lock_dir}\''.'
  exit 1
fi
exit 0
