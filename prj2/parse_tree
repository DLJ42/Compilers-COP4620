# test code
int sub(int a) {
	int a;
    a = a + 1;
}


# derivation tree for above code
program(test code) ->
    decalaration(KW: int, ID: sub) -> consumed 
        declarationPrime('(') -> 
            funDeclaration('(') -> consumed 
                params(KW: int) -> consumed 
                    paramsPrime(ID: a) -> consumed 
                        param(')') -> empty 
                        paramList(')') ->
                    paramsPrime(')') ->
                params(')') ->
            funDeclaration(')') -> consumed
                compoundStmt('{') -> consumed
                    localDeclarations(KW: int, ID: a) -> consumed
                        varDeclaration(';') -> consumed
                    localDeclarations(ID: a) -> empty
                    statementList(ID: a) -> 
                        statement(ID: a) -> 
                            expressionStmt(ID: a) ->
                                expression(ID: a) -> consumed
                                    expressionPrime('=') ->
                                        var('=') -> empty
                                        expressionPrimePrime('=') -> consumed
                                expression(ID: a) -> consumed
                                    expressionPrime('+') ->
                                        var('+') -> empty
                                        expressionPrimePrime('+') ->
                                            term('+') -> empty
                                            additiveExpressionPrime('+') ->
                                                addop('+') -> consumed
                                                additiveExpressionPrimePrime(INT: 1) ->
                                                    factor(INT: 1) -> consumed
                                                    term(';') -> empty
                                                    additiveExpressionPrime(';') -> empty
                                            simpleExpressionPrime(';') -> empty
                            expressionStmt(';') -> consumed
                    statementList('}') -> empty
                        statement('}') -> 
                            expressionStmt('}') ->
                                expression('}')
                                    simpleExpression('}') ->
                                        additiveExpression('}') ->
                                            factor('}') ->
                            compoundStmt('}') ->
                            selectionStmt('}') ->
                            iterationStmt('}') ->
                            returnStmt('}') ->
                    statementList('}') -> empty
                compoundStmt('}') -> consumed
program('$') ->
    declarationList('$') -> empty
accept
